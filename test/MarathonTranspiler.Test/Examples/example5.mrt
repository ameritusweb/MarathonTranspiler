@xml(pageName="/todos")
<Page>
    <AppContainer>
        <TodoHeader />
        <TodoList />
        <TodoFooter />
    </AppContainer>
</Page>

@xml(componentName="TodoList")
<Component>
    <Prop name="todos" reduxState="true" default="[]" />
    <Prop name="filter" reduxState="true" default="'all'" />
    <TodoListWrapper>
        <FilterSection />
        <TodoItems />
    </TodoListWrapper>
</Component>

@domInit(target="TodoListWrapper", tag="div", class="max-w-2xl mx-auto p-6 bg-white dark:bg-gray-800 shadow-md rounded-lg")

@varInit(className="TodoStore", type="array")
this.todos = [];

@varInit(className="TodoStore", type="string")
this.filter = "all";

@run(className="TodoStore", functionName="addTodo")
@parameter(name="text", type="string")
this.todos.push({ id: Date.now(), text: text, completed: false });

@run(className="TodoStore", functionName="toggleTodo")
@parameter(name="id", type="number")
this.todos = this.todos.map(todo => 
    todo.id === id ? {...todo, completed: !todo.completed} : todo
);

@run(className="TodoStore", functionName="removeTodo")
@parameter(name="id", type="number")
this.todos = this.todos.filter(todo => todo.id !== id);

@run(className="TodoStore", functionName="setFilter")
@parameter(name="filter", type="string")
this.filter = filter;

@run(className="TodoStore", functionName="fetchTodos", isAsync="true")
this.todos = await fetch('https://api.example.com/todos').then(res => res.json());

@onEvent(className="TodoStore", event="Click", target="addButton")
this.addTodo("New Task");

@onEvent(className="TodoStore", event="Click", target="clearButton")
this.todos = this.todos.filter(todo => !todo.completed);

@assert(className="TodoStore", condition="this.todos.length === 0")
"Todo list should start empty"

@assert(className="TodoStore", action="addTodo", condition="this.todos.length === 1")
"Adding a todo should increase the count"

@domInit(target="TodoHeader", tag="h1", class="text-2xl font-bold mb-4 text-gray-800 dark:text-white")
Todo List

@domInit(target="FilterSection", tag="div", class="flex space-x-2 mb-4")

@domInit(target="TodoItems", tag="ul", class="divide-y divide-gray-200 dark:divide-gray-700")

@domInit(target="TodoFooter", tag="div", class="mt-4 text-sm text-gray-500 dark:text-gray-400 flex justify-between")